import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# 필요한 라이브러리들
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.metrics import mean_squared_error, mean_absolute_error
import requests
from bs4 import BeautifulSoup
import yfinance as yf
import time

class SamsungStockPredictor:
    def __init__(self):
        self.samsung_data = None
        self.samsung_pref_data = None
        self.model = None
        self.forecast_result = None
        
    def get_korean_stock_data(self, symbol, period='2y'):
        """
        한국 주식 데이터를 야후 파이낸스에서 가져오기
        삼성전자: 005930.KS, 삼성전자우: 005935.KS
        """
        try:
            # 한국 주식 심볼 형식으로 변환
            if symbol == '005930':
                ticker = '005930.KS'
            elif symbol == '005935':
                ticker = '005935.KS'
            else:
                ticker = f"{symbol}.KS"
            
            stock = yf.Ticker(ticker)
            data = stock.history(period=period)
            
            # 한국 시간대 설정 및 컬럼명 한국어로 변경
            data.index = pd.to_datetime(data.index)
            data.columns = ['시가', '고가', '저가', '종가', '거래량', '배당금', '주식분할']
            
            return data
        except Exception as e:
            print(f"데이터 수집 중 오류 발생: {e}")
            return None
    
    def create_weekly_data(self, daily_data):
        """일봉 데이터를 주봉 데이터로 변환"""
        weekly_data = daily_data.resample('W').agg({
            '시가': 'first',
            '고가': 'max',
            '저가': 'min',
            '종가': 'last',
            '거래량': 'sum'
        }).dropna()
        
        return weekly_data
    
    def load_data(self):
        """삼성전자와 삼성전자우 데이터 로드"""
        print("📊 삼성전자 주가 데이터 수집 중...")
        
        # 삼성전자 (005930)
        self.samsung_data = self.get_korean_stock_data('005930', period='3y')
        
        # 삼성전자우 (005935)
        self.samsung_pref_data = self.get_korean_stock_data('005935', period='3y')
        
        if self.samsung_data is not None and self.samsung_pref_data is not None:
            # 주봉 데이터로 변환
            self.samsung_weekly = self.create_weekly_data(self.samsung_data)
            self.samsung_pref_weekly = self.create_weekly_data(self.samsung_pref_data)
            
            print(f"✅ 데이터 수집 완료!")
            print(f"삼성전자 데이터 기간: {self.samsung_weekly.index.min()} ~ {self.samsung_weekly.index.max()}")
            print(f"삼성전자우 데이터 기간: {self.samsung_pref_weekly.index.min()} ~ {self.samsung_pref_weekly.index.max()}")
            
            return True
        else:
            print("❌ 데이터 수집에 실패했습니다.")
            return False
    
    def analyze_stationarity(self, series, title=""):
        """시계열 데이터의 정상성 검정"""
        print(f"\n=== {title} 정상성 검정 ===")
        
        # ADF 테스트
        adf_result = adfuller(series.dropna())
        print(f"ADF 통계량: {adf_result[0]:.4f}")
        print(f"p-value: {adf_result[1]:.4f}")
        print(f"임계값: {adf_result[4]}")
        
        if adf_result[1] <= 0.05:
            print("✅ 정상 시계열입니다.")
            return True
        else:
            print("❌ 비정상 시계열입니다. 차분이 필요합니다.")
            return False
    
    def find_optimal_arima_params(self, series, max_p=5, max_d=2, max_q=5):
        """최적의 ARIMA 파라미터 찾기 (AIC 기준)"""
        print("\n🔍 최적 ARIMA 파라미터 탐색 중...")
        
        best_aic = float('inf')
        best_params = None
        
        for p in range(max_p + 1):
            for d in range(max_d + 1):
                for q in range(max_q + 1):
                    try:
                        model = ARIMA(series, order=(p, d, q))
                        fitted_model = model.fit()
                        
                        if fitted_model.aic < best_aic:
                            best_aic = fitted_model.aic
                            best_params = (p, d, q)
                            
                    except:
                        continue
        
        print(f"✅ 최적 파라미터: ARIMA{best_params}, AIC: {best_aic:.2f}")
        return best_params
    
    def create_arima_model(self, target_stock='samsung'):
        """ARIMA 모델 생성 및 훈련"""
        if target_stock == 'samsung':
            data = self.samsung_weekly['종가']
            title = "삼성전자"
        else:
            data = self.samsung_pref_weekly['종가']
            title = "삼성전자우"
        
        print(f"\n🤖 {title} ARIMA 모델 생성 중...")
        
        # 정상성 검정
        is_stationary = self.analyze_stationarity(data, title)
        
        # 최적 파라미터 탐색
        optimal_params = self.find_optimal_arima_params(data)
        
        # 모델 훈련
        self.model = ARIMA(data, order=optimal_params)
        self.fitted_model = self.model.fit()
        
        print(f"✅ {title} ARIMA 모델 생성 완료!")
        print(self.fitted_model.summary())
        
        return self.fitted_model
    
    def predict_future_prices(self, steps=12):
        """미래 주가 예측 (기본 12주)"""
        if self.fitted_model is None:
            print("❌ 모델이 훈련되지 않았습니다.")
            return None
        
        print(f"\n🔮 향후 {steps}주 주가 예측 중...")
        
        # 예측 수행
        forecast = self.fitted_model.forecast(steps=steps)
        forecast_ci = self.fitted_model.get_forecast(steps=steps).conf_int()
        
        # 예측 결과 정리
        future_dates = pd.date_range(
            start=self.samsung_weekly.index[-1] + timedelta(weeks=1),
            periods=steps,
            freq='W'
        )
        
        self.forecast_result = pd.DataFrame({
            '예측가': forecast,
            '하한': forecast_ci.iloc[:, 0],
            '상한': forecast_ci.iloc[:, 1]
        }, index=future_dates)
        
        print("✅ 예측 완료!")
        print(self.forecast_result.head())
        
        return self.forecast_result
    
    def visualize_results(self):
        """결과 시각화"""
        if self.forecast_result is None:
            print("❌ 예측 결과가 없습니다.")
            return
        
        plt.figure(figsize=(15, 10))
        
        # 전체 그래프
        plt.subplot(2, 2, 1)
        plt.plot(self.samsung_weekly.index, self.samsung_weekly['종가'], 
                label='삼성전자 실제 주가', color='blue', linewidth=2)
        plt.plot(self.samsung_pref_weekly.index, self.samsung_pref_weekly['종가'], 
                label='삼성전자우 실제 주가', color='green', linewidth=2)
        plt.title('삼성전자 vs 삼성전자우 주가 비교', fontsize=14, fontweight='bold')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # 예측 결과
        plt.subplot(2, 2, 2)
        # 최근 6개월 데이터
        recent_data = self.samsung_weekly.tail(24)
        plt.plot(recent_data.index, recent_data['종가'], 
                label='실제 주가', color='blue', linewidth=2)
        plt.plot(self.forecast_result.index, self.forecast_result['예측가'], 
                label='예측 주가', color='red', linewidth=2)
        plt.fill_between(self.forecast_result.index, 
                        self.forecast_result['하한'], 
                        self.forecast_result['상한'], 
                        alpha=0.3, color='red', label='예측 구간')
        plt.title('삼성전자 주가 예측 결과', fontsize=14, fontweight='bold')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # 거래량 분석
        plt.subplot(2, 2, 3)
        plt.plot(self.samsung_weekly.index, self.samsung_weekly['거래량'], 
                color='orange', linewidth=1, alpha=0.7)
        plt.title('삼성전자 거래량 추이', fontsize=14, fontweight='bold')
        plt.grid(True, alpha=0.3)
        
        # 가격 분포
        plt.subplot(2, 2, 4)
        plt.hist(self.samsung_weekly['종가'], bins=30, alpha=0.7, color='skyblue')
        plt.axvline(self.samsung_weekly['종가'].mean(), color='red', 
                   linestyle='--', label=f'평균: {self.samsung_weekly["종가"].mean():.0f}원')
        plt.title('삼성전자 주가 분포', fontsize=14, fontweight='bold')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def generate_investment_insight(self):
        """투자 인사이트 생성"""
        if self.forecast_result is None:
            return "예측 결과가 없습니다."
        
        current_price = self.samsung_weekly['종가'].iloc[-1]
        predicted_price = self.forecast_result['예측가'].iloc[-1]
        price_change = ((predicted_price - current_price) / current_price) * 100
        
        # 거래량 트렌드 분석
        recent_volume = self.samsung_weekly['거래량'].tail(4).mean()
        historical_volume = self.samsung_weekly['거래량'].mean()
        volume_change = ((recent_volume - historical_volume) / historical_volume) * 100
        
        insight = f"""
        🎯 삼성전자 투자 인사이트 (ARIMA 기반 분석)
        
        📊 현재 상황:
        - 현재 주가: {current_price:,.0f}원
        - 12주 후 예상 주가: {predicted_price:,.0f}원
        - 예상 수익률: {price_change:+.1f}%
        
        📈 거래량 분석:
        - 최근 평균 거래량: {recent_volume:,.0f}주
        - 전체 평균 거래량: {historical_volume:,.0f}주
        - 거래량 변화: {volume_change:+.1f}%
        
        💡 투자 관점:
        {"📈 상승 추세가 예상됩니다." if price_change > 0 else "📉 하락 추세가 예상됩니다."}
        {"📊 거래량이 증가하고 있어 관심이 높아지고 있습니다." if volume_change > 0 else "📊 거래량이 감소하고 있어 관심이 줄어들고 있습니다."}
        
        ⚠️ 주의사항:
        - 이 예측은 과거 데이터 기반 통계 모델입니다
        - 실제 투자 결정 시에는 추가적인 펀더멘털 분석이 필요합니다
        - 시장 상황, 정치적 요인, 글로벌 경제 상황 등을 고려해야 합니다
        """
        
        return insight

def main():
    # 예측 모델 실행
    predictor = SamsungStockPredictor()
    
    # 1. 데이터 로드
    if not predictor.load_data():
        return
    
    # 2. ARIMA 모델 생성
    model = predictor.create_arima_model(target_stock='samsung')
    
    # 3. 미래 예측
    forecast = predictor.predict_future_prices(steps=12)
    
    # 4. 결과 시각화
    predictor.visualize_results()
    
    # 5. 투자 인사이트 출력
    insight = predictor.generate_investment_insight()
    print(insight)

if __name__ == "__main__":
    main()
